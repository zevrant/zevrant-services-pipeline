- name: "Create new Ubuntu Linux VM with hookscript and description" #Alma Cloud init image refuses to run :/
  hosts: preprod

  tasks:
#    - name: 'Obtain First Available IP In /24 CIDR'
#      ansible.builtin.shell: |
#        import subprocess
#        import platform
#
#        hostCidr = "{{ hostCidr }}"
#        def failedPing(host):
#          command = ['ping', '-c1', '-q', '-w10',  host]
#          return subprocess.call(command) != 0
#
#        for i in range(1, 255):
#          host = hostCidr + str(i)
#          if failedPing(host):
#            print(host)
#            break
#      register: stdout_lines
#      args:
#        executable: /usr/bin/python3
#    - debug:
#        var: stdout_lines
#    - name: Write IP Address To File
#      ansible.builtin.copy:
#        content: "{{ stdout_lines }}"
#        dest: "/home/zevrant/{{ vmId }}"
#    - name: Log IP Address
#      become: true
#      become_user: root
#      ansible.builtin.shell: |
#        cat "/home/zevrant/{{ vmId }}" | jq -r .stdout_lines[-1]
#      register: ipAddress
#    - debug:
#        var: ipAddress.stdout
#    - name: Create Temp SSH Keys
#      ansible.builtin.shell: |
#        rm -f "/home/zevrant/.ssh/{{ vmId }}"
#        rm -f "/home/zevrant/.ssh/{{ vmId }}.pub"
#        ssh-keygen -t ecdsa -f "/home/zevrant/.ssh/{{ vmId }}" -N ""
#    - name: Log Pub Key
#      ansible.builtin.shell: |
#        cat "/home/zevrant/.ssh/{{ vmId }}.pub"
#      register: sshPubKey
#    - debug:
#        var: sshPubKey.stdout
    - name: Create Kubernetes Master VM
      community.general.proxmox_kvm:
        vmid: "{{ vmId }}"
        node: "{{ destHost }}"
        api_user: zevrant@pve
        api_token_id: test
        api_token_secret: "{{ apiPassword }}"
        api_host: "{{ apiHost }}"
        autostart: true
        balloon: 4096
        bios: seabios
        boot: c
        citype: nocloud
        ciuser: zevrant
        kvm: false
        localtime: false
        machine: pc
        migrate_speed: 0
        name: "kubernetes-master-{{ vmNumber }}"
        description: "Kubernetes Master {{vmNumber}}"
        cores: 4
        cpu: Westmere
        memory: 4096
        net:
          net0: "bridge=vmbr0,model=virtio"
        onboot: true
        scsihw: "virtio-scsi-single"
        sata:
          sata2: 'local-lvm:cloudinit,format=raw'
        nameservers:
          - '172.16.1.2'
          - '1.1.1.1'
        ostype: l26
#        sshkeys: "{{ sshPubKey.stdout }}"
        sshkeys: "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBKKXyClNSThUnVRq21snovBRgd7SXCkkX7RcEO8B12aqH3aYl+2QYew0cDm5d+2khOxBZRRqebCgEGo11EDOo1T0gmVjThGxFJG9GkOPfG12U9ODOLNDQz8EkrH1fzaqmw== Public key for PIV Authentication"
        pool: Default
        tags:
          - kubernetes
          - master
        validate_certs: false
        agent: 'enabled=1'
        ipconfig:
          ipconfig0: "ip={{ ipAddress }}/24,gw=172.16.1.1"
    - name: Download Cloud Init Image
      ansible.builtin.get_url:
        url: "{{ linuxVMUrl }}"
        dest: /tmp/ubuntu-jammy.qcow2
    - name: Import CloudInit Image to VM
      become: true
      become_user: root
      ansible.builtin.command:
        cmd: qm set "{{ vmId }}" -scsi0 'file=vm-storage:0,import-from=/tmp/ubuntu-jammy.qcow2' -bootdisk scsi0
    - name: Increate Disk Size By 50GB
      become: true
      become_user: root
      ansible.builtin.command:
        cmd: qm resize "{{ vmId }}" scsi0 +50G
    - name: Power On VM
      community.general.proxmox_kvm:
        vmid: "{{ vmId }}"
        node: "{{ destHost }}"
        api_user: zevrant@pve
        api_token_id: test
        api_token_secret: "{{ apiPassword }}"
        api_host: "{{ apiHost }}"
        state: started
        update: true
        timeout: 150
    - name: Wait For Host to Come Online
      ansible.builtin.shell: |
        import subprocess
        import time
        
        hostCidr = "{{ hostCidr }}"
        def sshPing(host):
          command = ['nc', '-z', host, '22']
          return subprocess.call(command) == 0
        
        timeSlept = 0
        
        while not sshPing("{{ ipAddress }}"):
          timeSlept += 3
          if timeSlept > 300 : 
            sys.exit(1)
          time.sleep(3)
      args:
        executable: /usr/bin/python3

#    - name: Power Off VM
#      community.general.proxmox_kvm:
#        vmid: "{{ vmId }}"
#        node: "{{ destHost }}"
#        api_user: zevrant@pve
#        api_token_id: test
#        api_token_secret: "{{ apiPassword }}"
#        api_host: "{{ apiHost }}"
#        state: stopped
#        update: true
#        timeout: 150
#    - name: Power On VM
#      community.general.proxmox_kvm:
#        vmid: "{{ vmId }}"
#        node: "{{ destHost }}"
#        api_user: zevrant@pve
#        api_token_id: test
#        api_token_secret: "{{ apiPassword }}"
#        api_host: "{{ apiHost }}"
#        state: started
#        update: true
#        timeout: 150
#    - name: SSH & Perform Configuration
#      ansible.builtin.shell: |
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" 'sudo apt-get update'
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" 'sudo apt-get dist-upgrade -y'
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" sudo apt-get isntall -y apt-transport-https ca-certificates curl
#        ssh -i "~/.ssh/keys/{{vmId}}" "zevrant@{{ ipAddress }}" echo \
#        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
#        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" tee /etc/apt/sources.list.d/docker.list > /dev/null
#
#
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
#
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" sudo apt-get update
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" sudo apt-get install -y containerd
#
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" 'sudo echo "{{ sshKey }}" > /home/zevrant/.ssh/authorized_keys'
#        ssh -i ~/.ssh/keys/{{vmId}} "zevrant@{{ ipAddress }}" hostname
#      register: setupOutput
#
#    - debug:
#        var: setupOutput.stdout_lines
        

        
        
        

        
