global:
  imageRegistry: ''
  imagePullSecrets: 
    - harbor-ro
  storageClass: ''
  postgresql:
    username: ''
    password: ''
    database: ''
    repmgrUsername: ''
    repmgrPassword: ''
    repmgrDatabase: ''
    existingSecret: ''
  ldap:
    bindpw: ''
    existingSecret: ''
  pgpool:
    adminUsername: ''
    adminPassword: ''
    existingSecret: ''
kubeVersion: ''
nameOverride: ''
fullnameOverride: ''
namespaceOverride: ''
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
postgresql:
  image:
    registry: harbor.zevrant-services.com
    repository: dockerhub/bitnami/postgresql-repmgr
    tag: 11.20.0-debian-11-r6
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  labels: {}
  podLabels: {}
  serviceAnnotations: {}
  replicaCount: 3
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    postgresql: 5432
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  podAnnotations: {}
  podAffinityPreset: ''
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ''
    key: ''
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ''
  schedulerName: ''
  terminationGracePeriodSeconds: ''
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: false
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []
  resources:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ''
  username: zevrant
  password: ''
  database: grafana
  existingSecret: grafana-postgres-credentials
  postgresPassword: ''
  usePasswordFile: ''
  repmgrUsePassfile: ''
  repmgrPassfilePath: ''
  upgradeRepmgrExtension: false
  pgHbaTrustAll: false
  syncReplication: true
  syncReplicationMode: 'ANY'
  repmgrUsername: repmgr
  repmgrPassword: ''
  repmgrDatabase: repmgr
  repmgrLogLevel: NOTICE
  repmgrConnectTimeout: 5
  repmgrReconnectAttempts: 2
  repmgrReconnectInterval: 3
  repmgrFenceOldPrimary: false
  repmgrChildNodesCheckInterval: 5
  repmgrChildNodesConnectedMinCount: 1
  repmgrChildNodesDisconnectTimeout: 30
  usePgRewind: false
  audit:
    logHostname: true
    logConnections: false
    logDisconnections: false
    pgAuditLog: ''
    pgAuditLogCatalog: 'off'
    clientMinMessages: error
    logLinePrefix: ''
    logTimezone: ''
  sharedPreloadLibraries: pgaudit, repmgr
  maxConnections: ''
  postgresConnectionLimit: ''
  dbUserConnectionLimit: ''
  tcpKeepalivesInterval: ''
  tcpKeepalivesIdle: ''
  tcpKeepalivesCount: ''
  statementTimeout: ''
  pghbaRemoveFilters: ''
  extraInitContainers: []
  repmgrConfiguration: ''
  configuration: ''
  pgHbaConfiguration: ''
  configurationCM: ''
  extendedConf: ''
  extendedConfCM: ''
  initdbScripts: {}
  initdbScriptsCM: ''
  initdbScriptsSecret: ''
  tls:
    enabled: true
    preferServerCiphers: true
    certificatesSecret: grafana-postgres-tls
    certFilename: tls.crt
    certKeyFilename: tls.key
  preStopDelayAfterPgStopSeconds: 25
  headlessWithNotReadyAddresses: false
witness:
  create: false
  labels: {}
  podLabels: {}
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  containerPorts:
    postgresql: 5432
  hostAliases: []
  hostNetwork: false
  hostIPC: false
  podAnnotations: {}
  podAffinityPreset: ''
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ''
    key: ''
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ''
  schedulerName: ''
  terminationGracePeriodSeconds: ''
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: false
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ''
  upgradeRepmgrExtension: false
  pgHbaTrustAll: false
  repmgrLogLevel: NOTICE
  repmgrConnectTimeout: 5
  repmgrReconnectAttempts: 2
  repmgrReconnectInterval: 3
  audit:
    logHostname: true
    logConnections: false
    logDisconnections: false
    pgAuditLog: ''
    pgAuditLogCatalog: 'off'
    clientMinMessages: error
    logLinePrefix: ''
    logTimezone: ''
  maxConnections: ''
  postgresConnectionLimit: ''
  dbUserConnectionLimit: ''
  tcpKeepalivesInterval: ''
  tcpKeepalivesIdle: ''
  tcpKeepalivesCount: ''
  statementTimeout: ''
  pghbaRemoveFilters: ''
  extraInitContainers: []
  repmgrConfiguration: ''
  configuration: ''
  pgHbaConfiguration: ''
  configurationCM: ''
  extendedConf: ''
  extendedConfCM: ''
  initdbScripts: {}
  initdbScriptsCM: ''
  initdbScriptsSecret: ''
pgpool:
  image:
    registry: harbor.zevrant-services.com
    repository: dockerhub/bitnami/pgpool
    tag: 4.4.2-debian-11-r34
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  customUsers: {}
  usernames: ''
  passwords: ''
  hostAliases: [ ]
  customUsersSecret: 'grafana-postgres-users'
  existingSecret: 'grafana-postgres-admin-user'
  srCheckDatabase: grafana
  labels: {}
  podLabels: {}
  serviceLabels: {}
  serviceAnnotations: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []
  replicaCount: 3
  podAnnotations: {}
  priorityClassName: ''
  schedulerName: ''
  terminationGracePeriodSeconds: ''
  topologySpreadConstraints: []
  podAffinityPreset: ''
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ''
    key: ''
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: false
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ''
  updateStrategy: {}
  containerPorts:
    postgresql: 5432
  minReadySeconds: ''
  adminUsername: admin
  adminPassword: ''
  usePasswordFile: ''
  authenticationMethod: md5
  logConnections: false
  logHostname: true
  logPerNodeStatement: false
  logLinePrefix: ''
  clientMinMessages: error
  numInitChildren: ''
  reservedConnections: 4
  maxPool: ''
  childMaxConnections: ''
  childLifeTime: ''
  clientIdleLimit: ''
  connectionLifeTime: ''
  useLoadBalancing: true
  loadBalancingOnWrite: transaction
  configuration: ''
  configurationCM: ''
  initdbScripts: {}
  initdbScriptsCM: ''
  initdbScriptsSecret: ''
  tls:
    enabled: true
    autoGenerated: false
    preferServerCiphers: true
    certificatesSecret: 'grafana-postgres-tls'
    certFilename: 'tls.crt'
    certKeyFilename: 'tls.key'
    certCAFilename: ''
ldap:
  enabled: false
  existingSecret: ''
  uri: ''
  basedn: ''
  binddn: ''
  bindpw: ''
  bslookup: ''
  scope: ''
  tlsReqcert: ''
  nssInitgroupsIgnoreusers: root,nslcd
rbac:
  create: false
  rules: []
serviceAccount:
  create: false
  name: ''
  annotations: {}
  automountServiceAccountToken: true
psp:
  create: false
metrics:
  enabled: false
  image:
    registry: harbor.zevrant-services.com
    repository: dockerhub/bitnami/postgres-exporter
    tag: 0.12.0-debian-11-r89
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  podSecurityContext:
    enabled: true
    runAsUser: 1001
  resources:
    limits: {}
    requests: {}
  containerPorts:
    http: 9187
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  service:
    type: ClusterIP
    ports:
      metrics: 9187
    nodePorts:
      metrics: ''
    clusterIP: ''
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9187'
  customMetrics: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  serviceMonitor:
    enabled: false
    namespace: ''
    interval: ''
    scrapeTimeout: ''
    annotations: {}
    labels: {}
    selector:
      prometheus: kube-prometheus
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ''
volumePermissions:
  enabled: false
  image:
    registry: harbor.zevrant-services.com
    repository: dockerhub/bitnami/bitnami-shell
    tag: 11-debian-11-r118
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
  podSecurityContext:
    runAsUser: 0
  resources:
    limits: {}
    requests: {}
persistence:
  enabled: true
  existingClaim: ''
  storageClass: 'csi-rbd-sc'
  mountPath: /bitnami/postgresql
  accessModes:
    - ReadWriteOnce
  size: 50Gi
  annotations: {}
  labels: {}
  selector: {}
service:
  type: ClusterIP
  ports:
    postgresql: 5432
  portName: postgresql
  nodePorts:
    postgresql: ''
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  clusterIP: '10.97.121.94'
  externalTrafficPolicy: Cluster
  extraPorts: []
  sessionAffinity: 'None'
  sessionAffinityConfig: {}
  annotations: {}
  serviceLabels: {}
  headless:
    annotations: {}
networkPolicy:
  enabled: false
  allowExternal: true
  egressRules:
    denyConnectionsToExternal: false
    customRules: []
