apiVersion: v1
kind: Service
metadata:
  namespace: monitoring2
  name: prometheus
spec:
  type: NodePort
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30627
      name: https
    - port: 80
      targetPort: 80
      name: http
  selector:
    app.kubernetes.io/name: prometheus

#---
#
#apiVersion: cert-manager.io/v1
#kind: Certificate
#metadata:
#  name: prometheus
#  namespace: monitoring2
#spec:
#  secretName: prometheus-tls
#  issuerRef:
#    name: acme-issuer
#  privateKey:
#    rotationPolicy: Always
#  duration: 48h
#  renewBefore: 24h
#  dnsNames:
#    - prometheus.preprod.zevrant-services.com
#
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring2
automountServiceAccountToken: true
imagePullSecrets:
  - name: regcred

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-read-only
subjects:
  # You can specify more than one "subject"
  - kind: ServiceAccount
    name: prometheus # "name" is case-sensitive
    namespace: monitoring2
    apiGroup: ""
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: ClusterRole #this must be Role or ClusterRole
  name: readOnly # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-metrics-read
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring2
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: view-metrics
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
spec:
  serviceAccountName: prometheus
  serviceMonitorSelector: {}
#    matchLabels:
#      component: main
  resources:
    requests:
      memory: 400Mi
  enableAdminAPI: false
  storage:
    volumeClaimTemplate:
      spec:
        volumeName: pvc-430015b1-ced8-4bb5-ae07-531b4696f39b
#        accessMode: ["ReadWriteOnce"]
        storageClassName: kadalu.monitoring
        resources:
          requests:
            storage: 100Gi
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  finalizers:
    - kubernetes.io/pvc-protection
  labels:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/managed-by: prometheus-operator
    app.kubernetes.io/name: prometheus
    operator.prometheus.io/name: prometheus
    operator.prometheus.io/shard: "0"
    prometheus: prometheus
  name: prometheus-prometheus-db-prometheus-prometheus-0
  namespace: monitoring2
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: kadalu.monitoring
  resources:
    requests:
      storage: 100Gi
  volumeMode: Filesystem

---
#
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: prometheus
#  namespace: monitoring2
#  labels:
#    app: prometheus
#spec:
#  strategy:
#    type: Recreate
#  replicas: 1
#  selector:
#    matchLabels:
#      app: prometheus
#  template:
#    metadata:
#      labels:
#        app: prometheus
#    spec:
#      securityContext:
#        fsGroup: 1000
#        fsGroupChangePolicy: "Always"
#      serviceAccountName: prometheus
#      volumes:
#        - name: prometheus-data
#          persistentVolumeClaim:
#            claimName: metrics-database
#        - name: prometheus-cert
#          secret:
#            secretName: prometheus-tls
#        - name: password-volume
#          emptyDir:
#            sizeLimit: "1Mi"
#        - name: prometheus-config
#          configMap:
#            name: prometheus-config
#      imagePullSecrets:
#        - name: regcred
#      containers:
#        - name: prometheus
#          image: docker.io/prom/prometheus:latest
#          securityContext:
#            capabilities:
#              add:
#                - IPC_LOCK
#          imagePullPolicy: Always
#          volumeMounts:
#            - name: prometheus-config
#              mountPath: /etc/prometheus/
#            - name: prometheus-data
#              mountPath: /prometheus
#          env:
#            - name: prometheus_API_ADDR
#              value: https://prometheus.preprod.zevrant-services.com
#          ports:
#            - containerPort: 9090
#          resources:
#            requests:
#              memory: 8Gi
#              cpu: 2000m
#            limits:
#              memory: 8Gi
#              cpu: 2000m
#          startupProbe:
#            httpGet:
#              scheme: HTTP
#              path: /
#              port: 9090
#            failureThreshold: 5
#            periodSeconds: 5
#          livenessProbe:
#            httpGet:
#              scheme: HTTP
#              path: /
#              port: 9090
#            failureThreshold: 3
#            periodSeconds: 5
#
#---
#
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: prometheus-config
#  namespace: monitoring2
#data:
#  prometheus.yml: |
#    global:
#      scrape_interval: 10s
#    scrape_configs:
#      - job_name: node-exporter
#        static_configs:
#          - targets:
#              - zevrant-01.zevrant-services.com:9100
#              - zevrant-02.zevrant-services.com:9100
#              - zevrant-03.zevrant-services.com:9100
#              - zevrant-04.zevrant-services.com:9100
#              - zevrant-05.zevrant-services.com:9100
#              - zevrant-06.zevrant-services.com:9100
#      - job_name: kube-state-metrics
#        metrics_path: /metrics
#        static_configs:
#          - targets:
#            - kube-state-metrics.kube-system.svc.cluster.local:8080
#      - job_name: 'kubernetes-apiservers'
#        kubernetes_sd_configs:
#        - role: endpoints
#        scheme: https
#        tls_config:
#          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#        relabel_configs:
#          - source_labels: [ __meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name ]
#            action: keep
#            regex: default;kubernetes;https
#      - job_name: 'kubernetes-nodes'
#        scheme: https
#        tls_config:
#          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#        kubernetes_sd_configs:
#          - role: node
#        relabel_configs:
#          - action: labelmap
#            regex: __meta_kubernetes_node_label_(.+)
#          - target_label: __address__
#            replacement: kubernetes.default.svc:443
#          - source_labels: [ __meta_kubernetes_node_name ]
#            regex: (.+)
#            target_label: __metrics_path__
#            replacement: /api/v1/nodes/${1}/proxy/metrics
#      - job_name: 'kubernetes-pods'
#        kubernetes_sd_configs:
#          - role: pod
#        relabel_configs:
#          - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
#            action: keep
#            regex: true
#          - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
#            action: replace
#            target_label: __metrics_path__
#            regex: (.+)
#          - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
#            action: replace
#            regex: ([^:]+)(?::\d+)?;(\d+)
#            replacement: $1:$2
#            target_label: __address__
#          - action: labelmap
#            regex: __meta_kubernetes_pod_label_(.+)
#          - source_labels: [ __meta_kubernetes_namespace ]
#            action: replace
#            target_label: kubernetes_namespace
#          - source_labels: [ __meta_kubernetes_pod_name ]
#            action: replace
#            target_label: kubernetes_pod_name
#      - job_name: 'kubernetes-service-endpoints'
#        kubernetes_sd_configs:
#          - role: endpoints
#        relabel_configs:
#          - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
#            action: keep
#            regex: true
#          - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scheme ]
#            action: replace
#            target_label: __scheme__
#            regex: (https?)
#          - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_path ]
#            action: replace
#            target_label: __metrics_path__
#            regex: (.+)
#          - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
#            action: replace
#            target_label: __address__
#            regex: ([^:]+)(?::\d+)?;(\d+)
#            replacement: $1:$2
#          - action: labelmap
#            regex: __meta_kubernetes_service_label_(.+)
#          - source_labels: [ __meta_kubernetes_namespace ]
#            action: replace
#            target_label: kubernetes_namespace
#          - source_labels: [ __meta_kubernetes_service_name ]
#            action: replace
#            target_label: kubernetes_name
#      - job_name: 'cadvisor'
#        kubernetes_sd_configs:
#          - role: node
#        scheme: https
#        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#        tls_config:
#          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#        metrics_path: /metrics/cadvisor