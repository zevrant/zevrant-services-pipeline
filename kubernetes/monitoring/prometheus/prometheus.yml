apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
#      nodePort: 30627
      name: https
    - port: 80
      name: http
  selector:
    app: prometheus

---

apiVersion: v1
kind: Service
metadata:
  namespace: monitoring
  name: prometheus-thanos
spec:
  ports:
    - port: 10902
      targetPort: 10902
      name: http
  selector:
    app: prometheus

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: prometheus
  namespace: monitoring
spec:
  secretName: prometheus-monitoring-tls
  issuerRef:
    name: acme-issuer
  privateKey:
    rotationPolicy: Always
  duration: 48h
  renewBefore: 24h
  dnsNames:
    - prometheus-monitoring.preprod.zevrant-services.com
#
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
automountServiceAccountToken: true
imagePullSecrets:
  - name: harbor-ro

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-read-only
subjects:
  # You can specify more than one "subject"
  - kind: ServiceAccount
    name: prometheus # "name" is case-sensitive
    namespace: monitoring
    apiGroup: ""
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: ClusterRole #this must be Role or ClusterRole
  name: readOnly # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-metrics-read
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: view-metrics
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: metrics-database
  labels:
    app.kubernetes.io/name: metrics-database
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: csi-rbd-sc
  volumeMode: Filesystem


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "Always"
      serviceAccountName: prometheus
      volumes:
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: metrics-database
        - name: prometheus-cert
          secret:
            secretName: prometheus-monitoring-tls
        - name: password-volume
          emptyDir:
            sizeLimit: "1Mi"
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: objstore-config
          secret:
            secretName: thanos-objstore-config
      containers:
        - name: prometheus
          image: docker.io/prom/prometheus:latest
          args:
            - --storage.tsdb.min-block-duration=5m
            - --storage.tsdb.max-block-duration=5m
            - --config.file=/etc/prometheus/..data/prometheus.yml
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          imagePullPolicy: Always
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
            - name: prometheus-data
              mountPath: /prometheus
          env:
            - name: prometheus_API_ADDR
              value: https://prometheus-monitoring.preprod.zevrant-services.com
          ports:
            - containerPort: 9090
          resources:
            requests:
              memory: 8Gi
              cpu: 2000m
            limits:
              memory: 8Gi
              cpu: 2000m
          startupProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 9090
            failureThreshold: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 9090
            failureThreshold: 3
            periodSeconds: 5
#        - name: thanos-sidecar
#          image: docker.io/bitnami/thanos:0.31.0
#          ports:
#            - containerPort: 10902
#          args:
#            - sidecar
#            - --tsdb.path=/prometheus
#            - --prometheus.url=http://localhost:9090
#            - --hash-func=SHA256
#            - --objstore.config-file=/var/zevrant-services/objstoreconfig/..data/objstore.yml
#            - --grpc-address=0.0.0.0:10901
#            - --http-address=0.0.0.0:10902
#          volumeMounts:
#            - mountPath: /prometheus
#              name: prometheus-data
#            - mountPath: /var/zevrant-services/objstoreconfig
#              name: objstore-config



---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 10s
      external_labels:
        replica: 0
        cluster: preprod
        env: monitoring
        region: us-east-1
    remote_write: 
      - url: https://thanos-receive.preprod.zevrant-services.com/api/v1/receive
      
    scrape_configs:
      - job_name: node-exporter
        static_configs:
          - targets:
              - kubernetes-master-01.preprod.zevrant-services.com:9100
              - kubernetes-master-02.preprod.zevrant-services.com:9100
              - kubernetes-master-03.preprod.zevrant-services.com:9100
              - kubernetes-master-04.preprod.zevrant-services.com:9100
              - kubernetes-master-05.preprod.zevrant-services.com:9100
              - kubernetes-worker-01.preprod.zevrant-services.com:9100
              - kubernetes-worker-02.preprod.zevrant-services.com:9100
              - kubernetes-worker-03.preprod.zevrant-services.com:9100
              - kubernetes-worker-04.preprod.zevrant-services.com:9100
              - kubernetes-worker-05.preprod.zevrant-services.com:9100
      - job_name: kube-state-metrics
        metrics_path: /metrics
        static_configs:
          - targets:
            - kube-state-metrics.kube-system.svc.cluster.local:8080
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [ __meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name ]
            action: keep
            regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [ __meta_kubernetes_node_name ]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
            action: keep
            regex: true
          - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [ __meta_kubernetes_namespace ]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [ __meta_kubernetes_pod_name ]
            action: replace
            target_label: kubernetes_pod_name
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
            action: keep
            regex: true
          - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scheme ]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_path ]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [ __meta_kubernetes_namespace ]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [ __meta_kubernetes_service_name ]
            action: replace
            target_label: kubernetes_name
      - job_name: 'cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        metrics_path: /metrics/cadvisor