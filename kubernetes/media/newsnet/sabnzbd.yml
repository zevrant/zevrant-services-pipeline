apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sabnzbd
  namespace: media
spec:
  replicas: 1
  serviceName: sabnzbd
  selector:
    matchLabels:
      app: sabnzbd
  volumeClaimTemplates:
      - metadata:
          name: downloads
        spec:
          accessModes: ["ReadWriteOnce" ]
          storageClassName: 'csi-rbd-sc'
          resources:
            requests:
              storage: 1Ti
      - metadata:
          name: config
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: 'csi-rbd-sc'
          resources:
            requests:
              storage: 10Gi
      - metadata:
          name: sonar-config
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: 'csi-rbd-sc'
          resources:
            requests:
              storage: 10Gi
  template:
    metadata:
      labels:
        app: sabnzbd
    spec:
      imagePullSecrets:
        - name: harbor-ro
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "Always"
      volumes:
        - name: media-storage
          persistentVolumeClaim:
            claimName: downloads-sabnzbd-0
        - name: configmap
          configMap:
            name: sabnzbd
        - name: sonar-config
          persistentVolumeClaim:
            claimName: sonar-config-sabnzbd-0
        - name: sonar-configmap
          configMap:
            name: sonarr
        - name: radarr-config
          persistentVolumeClaim:
            claimName: radarr-config
        - name: jellyfin-config
          persistentVolumeClaim:
            claimName: jellyfin-config
      initContainers:
        - name: init
          image: docker.io/ubuntu:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: sonar-configmap
              mountPath: /configmap/config
            - name: sonar-config
              mountPath: /config
          command:
            - /bin/bash
          args:
            - -c
            - |
              ls -l /configmap/config
              cp /configmap/config/config.xml /config
      containers:
        - name: sabnzbd
          image: docker.io/linuxserver/sabnzbd:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: media-storage
              mountPath: /downloads
            - name: config
              mountPath: /config/
          ports:
            - containerPort: 8080
          env:
            - name: TX
              value: America/Detroit
            - name: PUID
              value: '1000'
            - name: PGID
              value: '1000'
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
#          livenessProbe:
#            failureThreshold: 3
#            successThreshold: 1
#            periodSeconds: 10
#            httpGet:
#              port: 8080
#              path: /
#          startupProbe:
#            successThreshold: 1
#            failureThreshold: 5
#            periodSeconds: 5
#            httpGet:
#              port: 8080
#              path: /
        - name: sonarr
          image: ghcr.io/hotio/sonarr:release
          imagePullPolicy: Always
          volumeMounts:
            - name: media-storage
              mountPath: /downloads
            - name: sonar-config
              mountPath: /config
          ports:
            - containerPort: 8989
          env:
            - name: TZ
              value: America/Detroit
          resources:
            requests:
              cpu: 1000m
              memory: 4Gi
            limits:
              cpu: 8000m
              memory: 4Gi
#          livenessProbe:
#            failureThreshold: 5
#            successThreshold: 1
#            periodSeconds: 5
#            httpGet:
#              port: 8989
#              path: /
#          startupProbe:
#            successThreshold: 1
#            failureThreshold: 5
#            periodSeconds: 5
#            httpGet:
#              port: 8989
#              path: /
        - name: radarr
          image: ghcr.io/hotio/radarr:release
          imagePullPolicy: Always
          volumeMounts:
            - name: media-storage
              mountPath: /downloads
            - name: radarr-config
              mountPath: /config
          ports:
            - containerPort: 7878
          env:
            - name: TZ
              value: America/Detroit
          resources:
            requests:
              cpu: 1000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
#          livenessProbe:
#            failureThreshold: 5
#            successThreshold: 1
#            periodSeconds: 5
#            httpGet:
#              port: 7878
#              path: /
#          startupProbe:
#            successThreshold: 1
#            failureThreshold: 5
#            periodSeconds: 5
#            httpGet:
#              port: 7878
#              path: /
        - name: jellyfin
          image: docker.io/jellyfin/jellyfin:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: media-storage
              mountPath: /downloads
            - name: jellyfin-config
              mountPath: /config
          ports:
            - containerPort: 8096
          env:
            - name: TX
              value: America/Detroit
          resources:
            requests:
              cpu: 8000m
              memory: 16Gi


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: sonarr
  namespace: media
data:
  config.xml: |
    <Config>
        <BindAddress>*</BindAddress>
        <Port>8989</Port>
        <SslPort>9898</SslPort>
        <EnableSsl>False</EnableSsl>
        <LaunchBrowser>True</LaunchBrowser>
        <ApiKey>92668dfcdc7d432f861806476caffec3</ApiKey>
        <AuthenticationMethod>None</AuthenticationMethod>
        <AuthenticationRequired>Disabled</AuthenticationRequired>
        <Branch>develop</Branch>
        <LogLevel>info</LogLevel>
        <SslCertPath></SslCertPath>
        <SslCertPassword></SslCertPassword>
        <UrlBase></UrlBase>
        <InstanceName>Sonarr</InstanceName>
        <UpdateMechanism>Docker</UpdateMechanism>
    </Config>                
